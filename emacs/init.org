#+TITLE: Jawad's Emacs Config
#+AUTHOR: Jawad Ahmed (@jawadcode)
#+DESCRIPTION: My personal emacs configuration.
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

# TODO:
# * Proof-General for Coq, I may test Coq out on windows considering
#   that i have the DKML OCaml toolchain working.

* Table of Contents :toc:
- [[#prelude][Prelude]]
  - [[#initel-header][~init.el~ header]]
  - [[#inhibit-startup-message][Inhibit Startup Message]]
  - [[#set-font][Set Font]]
  - [[#disable-scroll-bar][Disable Scroll Bar]]
  - [[#zooming-inout][Zooming In/Out]]
  - [[#indentation][Indentation]]
  - [[#linux-specific-macro][Linux-Specific Macro]]
- [[#straightel-setup][Straight.el Setup]]
  - [[#bootstrap-straight][Bootstrap Straight]]
  - [[#locations][Locations]]
  - [[#delight][Delight]]
  - [[#general-keybinds][General Keybinds]]
- [[#misc-setup][Misc Setup]]
  - [[#display-line-numbers-and-enable-soft-wrap][Display Line Numbers and Enable Soft-Wrap]]
  - [[#garbage-collector-magic-hack][Garbage Collector Magic Hack]]
  - [[#create-general-keybinds-definer][Create General Keybinds Definer]]
  - [[#miscellaneous-keybinds][Miscellaneous Keybinds]]
- [[#editor][Editor]]
  - [[#electric-pair-mode][Electric-Pair-Mode]]
  - [[#evil-mode][Evil Mode]]
  - [[#which-key][Which-Key]]
  - [[#projectile][Projectile]]
  - [[#polymode][Polymode]]
- [[#programs][Programs]]
  - [[#dashboard][Dashboard]]
  - [[#treemacs][Treemacs]]
  - [[#pdf-tools][PDF-Tools]]
- [[#appearance][Appearance]]
  - [[#all-the-icons][All The Icons]]
  - [[#ligatures][Ligatures]]
  - [[#solaire-mode][Solaire-Mode]]
  - [[#enable-divider-for-resizing-windows][Enable Divider for Resizing Windows]]
  - [[#standard-themes-standard-light][Standard-Themes (Standard-Light)]]
  - [[#centaur-tabs][Centaur Tabs]]
  - [[#tree-sitter][Tree-Sitter]]
- [[#org-mode][Org-Mode]]
  - [[#disable-org-indent-mode][Disable Org-Indent-Mode]]
  - [[#org-keybinds][Org Keybinds]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enable-org-bullets][Enable Org Bullets]]
  - [[#enable-org-tempo-expansions][Enable Org Tempo Expansions]]
- [[#completion][Completion]]
  - [[#ivy--counsel][Ivy & Counsel]]
  - [[#company][Company]]
  - [[#yasnippet][Yasnippet]]
- [[#language-support][Language Support]]
  - [[#lsp-mode][LSP-Mode]]
  - [[#c-mode--c-mode][C-Mode && C++-Mode]]
  - [[#rust-mode][Rust-Mode]]
  - [[#python-mode][Python-Mode]]
  - [[#haskell-mode][Haskell-Mode]]
  - [[#lean4-mode][Lean4-Mode]]
  - [[#idris2-mode][Idris2-Mode]]
  - [[#meson-mode][Meson-Mode]]
  - [[#cmake-mode][CMake-Mode]]
  - [[#nix-mode][Nix-Mode]]
  - [[#typescript-mode][Typescript-Mode]]
  - [[#svelte-mode][Svelte-Mode]]
  - [[#latex-mode-auctex][LaTeX-Mode (AUCTeX)]]

* Prelude

The following configurations set the scene for the tragedy that is my emacs
configuration.
  
** ~init.el~ header

#+begin_src emacs-lisp
  ;;; init.el --- Personal configuration -*- lexical-binding: t -*-
#+end_src

** Inhibit Startup Message

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)
#+end_src

** Set Font

#+begin_src emacs-lisp
  (set-face-font 'default
          (font-spec :family "Iosevka Term SS07"
              :size 13.5
              :weight 'normal
              :width 'normal
              :slant 'normal))
  (set-face-font 'fixed-pitch
          (font-spec :family "Iosevka Term SS07"
              :size 13.5
              :weight 'normal
              :width 'normal
              :slant 'normal))
  (set-face-font 'variable-pitch
          (font-spec :family "Roboto"
              :size 13.5
              :weight 'normal
              :width 'normal))
  (set-fontset-font t
          'emoji
          (font-spec :family "Noto Color Emoji"
                :size 13.5
                :weight 'normal
                :width 'normal
                :slant 'normal))
#+end_src

** Disable Scroll Bar

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

** Zooming In/Out

Enable Ctrl +/- and Ctrl mouse-wheel-(up|down) keybinds.

#+begin_src emacs-lisp
  (keymap-global-set "C-+"            #'text-scale-increase)
  (keymap-global-set "C--"            #'text-scale-decrease)
  (keymap-global-set "C-<wheel-up>"   #'text-scale-increase)
  (keymap-global-set "C-<wheel-down>" #'text-scale-decrease)
#+end_src

** Indentation

The mantra of the emacs user: undoing dumb defaults.

#+begin_src emacs-lisp
  (indent-tabs-mode -1)
  (setq-default tab-width 4)
  (setq-default evil-shift-width 4)
#+end_src

** Linux-Specific Macro

A few aspects of this config are regrettably platform-specific, particularly
linux-specific.

#+begin_src emacs-lisp
  (defmacro linux-specific! (body)
    (pcase system-type
       ('gnu/linux body)
       (_ ())))
#+end_src

* Straight.el Setup

** Bootstrap Straight

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

** Locations

#+begin_src emacs-lisp
  (use-package f)

  (setq default-directory (f-slash (getenv "HOME")))
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq custom-file (f-join user-emacs-directory "custom.el"))
#+end_src

** Delight

Delight allows us alter the apperance of modes in the modeline. This needs to be
loaded in advance as it adds a ~:delight~ keyword to ~use-package~ invocations.

#+begin_src emacs-lisp
  (use-package delight
    :config
    (delight '((eldoc-mode nil "eldoc")
               (abbrev-mode nil "abbrev")
               (flycheck-mode nil "flycheck"))))
#+end_src

** General Keybinds

The general package allows us to define keybinds and provide descriptions for
each of them to the which-key package. This needs to be loaded in advance as
each of the following packages will depend on it.

#+begin_src emacs-lisp
  (use-package general :config (general-evil-setup))
#+end_src

* Misc Setup

** Display Line Numbers and Enable Soft-Wrap

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (global-visual-line-mode t)
  (use-package emacs
    :delight (visual-line-mode))
#+end_src

** Garbage Collector Magic Hack

This modifies the emacs lisp garbage collector to improve performance of lsp-mode
and other emacs packages.

#+begin_src emacs-lisp
  (use-package gcmh
    :custom
    ;; From doom emacs' early-init.el
    (gcmh-idle-delay 'auto) ; default is 15s
    (gcmh-auto-idle-delay-factor 10)
    (gcmh-high-cons-threshold (* 16 1024 1024)) ; 16mb
    :config (gcmh-mode 1)
    :delight)
#+end_src

** Create General Keybinds Definer

#+begin_src emacs-lisp
  (general-create-definer jawadcode/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")
#+end_src

** Miscellaneous Keybinds

#+begin_src emacs-lisp
  (jawadcode/leader-keys
    ;; Buffer keybinds
    "b"   '(:ignore t :wk "Buffer")
    "b k" #'kill-buffer
    ;; File keybinds
    "f"   '(:ignore t :wk "File")
    "f f" #'find-file
    "f r" #'counsel-recentf
    "f c" '((lambda ()
              (interactive)
              (find-file (f-join user-emacs-directory "init.org")))
            :wk "Open emacs config")
    ";"   #'comment-line
    ;; Help keybinds
    "h"   '(:ignore t :wk "Help")
    "h f" #'describe-function
    "h v" #'describe-variable)
#+end_src

* Editor

** Electric-Pair-Mode

I don't use any of the fancy features of the Smartparens package so I thought I
would eliminate some bloat by using the built-in pair completion mode as it is
more than sufficient.

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

** Evil Mode

Vim keybinds in emacs because why not.

#+begin_src emacs-lisp
  (use-package evil
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-vsplit-window-right t)
    (evil-split-window-below t)
    :config
    (evil-set-undo-system 'undo-redo)
    (evil-mode 1)
    (jawadcode/leader-keys
      "w"   '(:ignore t :wk "Window")
      ;; Window splits
      "w x" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new    :wk "New horizontal window")
      "w m" '(evil-window-vnew   :wk "New vertical window")
      "w h" '(evil-window-split  :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")))

  ;; Extra evil
  (use-package evil-collection
    :after evil
    :custom (evil-collection-mode-list '(dashboard dired ibuffer))
    :config (evil-collection-init)
    :delight evil-collection-unimpaired-mode)

  (use-package evil-anzu :after evil)

  (use-package evil-tutor)
    #+end_src

** Which-Key

Which-key shows a menu of keybinds whenever a key that is the beginning of a
keybind is pressed.

#+begin_src emacs-lisp
  (use-package which-key
    :custom
    (which-key-add-column-padding 3)
    (which-key-idle-delay 0.1)
    :config (which-key-mode 1)
    :delight)
#+end_src

** Projectile

This allows us to manage projects and integrates with lsp-mode as well as
treemacs.

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1)
    (jawadcode/leader-keys "p" projectile-command-map)
    :delight '(:eval (concat " " (projectile-project-name))))
#+end_src

** Polymode

Polymode is an implementation of multiple major modes, this allows us to have
language support within codeblocks.

#+begin_src emacs-lisp
  (use-package poly-org)
#+end_src

* Programs

** Dashboard

This package shows a dashboard on startup, getting rid of that hideous default
one. It includes useful links to recent files as well as projects, and most
importantly, it has a better emacs logo.

#+begin_src emacs-lisp
  (use-package dashboard
    :if (< (length command-line-args) 2)
    :after (all-the-icons projectile)
    :init
    (setq initial-buffer-choice 'dashboard-open
          dashboard-startup-banner 'logo
          dashboard-icon-type 'all-the-icons
          dashboard-projects-backend 'projectile
          dashboard-center-content t
          dashboard-set-heading-icons t
          dashboard-set-file-icons t
          dashboard-startupify-list '(dashboard-insert-banner
                                      dashboard-insert-newline
                                      dashboard-insert-banner-title
                                      dashboard-insert-newline
                                      dashboard-insert-navigator
                                      dashboard-insert-newline
                                      dashboard-insert-init-info
                                      dashboard-insert-items)
          dashboard-items '((recents   . 6)
                            (projects  . 6)
                            (bookmarks . 6)))
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Treemacs

This is a file-tree view that can be opened to the left side of any code buffers.

#+begin_src emacs-lisp
  (use-package treemacs-all-the-icons
    :defer t
    :commands treemacs-all-the-icons)

  (use-package treemacs
    :after projectile
    :config
    (treemacs-load-all-the-icons-with-workaround-font "Hermit")
    (treemacs-project-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-git-mode 'deferred)
    :general (jawadcode/leader-keys "r" #'treemacs))

  (use-package treemacs-evil :after (treemacs evil))

  (use-package treemacs-projectile :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

  (use-package treemacs-tab-bar :after treemacs)
#+end_src

** PDF-Tools

A PDF viewer.

#+begin_src emacs-lisp
  (linux-specific!
   (use-package pdf-tools
     :mode ("\\.pdf\\'" . pdf-view-mode)
     :config
     (setq-default pdf-view-display-size 'fit-width)
     (setq pdf-view-use-scaling t
           pdf-view-use-imagemagick nil)
     (evil-set-initial-state 'pdf-view-mode 'emacs)
     (add-hook
      'pdf-view-mode-hook
      #'(lambda ()
         (set (make-local-variable 'evil-emacs-state-cursor) (list nil))))))
#+end_src

* Appearance

** All The Icons

Allows for icon support across many packages.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :config
    (set-fontset-font t 'unicode (font-spec :family "all-the-icons") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "file-icons") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "Material Icons") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "github-octicons") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "FontAwesome") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "Weather Icons") nil 'append))
#+end_src

** Ligatures

#+begin_src emacs-lisp
  (use-package ligature
    :config
    ;; Enable all Iosevka ligatures in programming modes
    (ligature-set-ligatures
     'prog-mode
     '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
       "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

** Solaire-Mode

Distinguishes code buffers from other buffers. Idk if this is even working but
once again, I can't be bothered checking.

#+begin_src emacs-lisp
  (use-package solaire-mode :config (solaire-global-mode 1))
#+end_src

** Enable Divider for Resizing Windows

#+begin_src emacs-lisp
  (window-divider-mode)
#+end_src

** Standard-Themes (Standard-Light)

#+begin_src emacs-lisp
  (use-package standard-themes
    :custom
    ;; Read the doc string of each of those user options.  These are some
    ;; sample values.
    (standard-themes-bold-constructs t)
    (standard-themes-italic-constructs t)
    (standard-themes-disable-other-themes t)
    (standard-themes-mixed-fonts t)
    (standard-themes-variable-pitch-ui t)
    (standard-themes-prompts '(extrabold italic))
    ;; more complex alist to set weight, height, and optional
    ;; `variable-pitch' per heading level (t is for any level not
    ;; specified):
    (standard-themes-headings
     '((0 . (variable-pitch light 1.8))
       (1 . (variable-pitch light 1.7))
       (2 . (variable-pitch light 1.6))
       (3 . (variable-pitch semilight 1.5))
       (4 . (variable-pitch semilight 1.4))
       (5 . (variable-pitch 1.3))
       (6 . (variable-pitch 1.2))
       (7 . (variable-pitch 1.1))
       (agenda-date . (1.2))
       (agenda-structure . (variable-pitch light 1.7))
       (t . (variable-pitch 1.0))))
    :config (standard-themes-load-light))
#+end_src

** Centaur Tabs

#+begin_src emacs-lisp
  (use-package centaur-tabs
    :after (all-the-icons)
    :custom
    (centaur-tabs-style "bar")
    (centaur-tabs-set-bar 'over)
    (centaur-tabs-cycle-scope 'tabs)
    :config
    (centaur-tabs-group-by-projectile-project)
    (centaur-tabs-change-fonts (face-attribute 'variable-pitch :font) 135)
    (jawadcode/leader-keys
      "t" '(:ignore t :wk "Centaur Tabs")
      "t n" #'centaur-tabs-forward
      "t p" #'centaur-tabs-backward)
    (centaur-tabs-mode t)
    :hook (dashboard-mode . centaur-tabs-local-mode))
#+end_src

** Tree-Sitter

Tree-sitter is a highly performant parser "framework" that can be used for syntax
highlighting. Tree-sitter functionality is actually built into Emacs 29+, however
its a complete pain in the arse to setup and maintain, so I'm resorting to the
tried and true tree-sitter package.

#+begin_src emacs-lisp
  (use-package tree-sitter
    :after tree-sitter-langs
    :config
    (require 'tree-sitter-langs)
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    :delight)

  (use-package tree-sitter-langs)
#+end_src

* Org-Mode

** Disable Org-Indent-Mode

Causes weird indentation issues within (emacs lisp) codeblocks.

#+begin_src emacs-lisp
  (setq org-indent-mode nil)
#+end_src

** Org Keybinds

#+begin_src emacs-lisp
  ;; Org-mode keybinds
  (jawadcode/leader-keys
    "o"   '(:ignore t :wk "Org")
    "o a" #'org-agenda
    "o e" #'org-export-dispatch
    "o i" #'org-toggle-item
    "o t" #'org-todo
    "o T" #'org-todo-list
    "o g" #'org-babel-tangle
    "o d" #'org-time-stamp)

  ;; Org mode table keybinds
  (jawadcode/leader-keys
    "o b"   '(:ignore t :wk "Tables")
    "o b h" #'org-table-insert-hline)
#+end_src

** Enabling Table of Contents

Toc-org automatically generates a table of contents (toc) for org files.

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :hook (org-mode . toc-org-enable))
#+end_src

** Enable Org Bullets

Org-bullets gives us fancy bullet-points with headings and lists in org mode,
as well as indentation under each heading for clarity.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

** Enable Org Tempo Expansions

Like emmet but for org-mode.
For example, <s expands to a source code block when followed by TAB.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook #'(lambda () (require 'org-tempo)))
#+end_src

* Completion

** Ivy & Counsel

Ivy is a generic completion frontend.
Counsel provides Ivy versions of common Emacs commands.
Ivy-rich adds descriptions alongside commands in M-x.

#+begin_src emacs-lisp
  (use-package ivy
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    (enable-recursive-minibuffers t)
    :config
    (ivy-mode)
    :delight)

  (use-package counsel
    :after ivy
    :config (counsel-mode)
    :delight)

  ;; Adds bling to our ivy completions
  (use-package ivy-rich
    :after ivy
    :custom
    ;; I'll be honest, idk what this does
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                'ivy-rich-switch-buffer-transform)
    (ivy-rich-mode 1))

  (use-package all-the-icons-ivy-rich
    :after ivy-rich
    :config (all-the-icons-ivy-rich-mode 1))
#+end_src

** Company

Company is a completion framework for text-mode.

#+begin_src emacs-lisp
  (use-package company
    :init (setq company-tooltip-align-annotations t)
    :config
    (keymap-set company-active-map "C-n"   nil)
    (keymap-set company-active-map "C-p"   nil)
    (keymap-set company-active-map "RET"   nil)
    (keymap-set company-active-map "M-j"   #'company-select-next)
    (keymap-set company-active-map "M-k"   #'company-select-previous)
    (keymap-set company-active-map "<tab>" #'company-complete-selection)
    (global-company-mode)
    (delight 'company-capf-mode)
    :delight)

(use-package company-box
  :after company
  :hook (company-mode . company-box-mode)
  :delight)
#+end_src

** Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :delight yas-minor-mode)

  (use-package yasnippet-snippets
    :after (yasnippet))
#+end_src

* Language Support

** LSP-Mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :custom (lsp-inlay-hint-enable t)
    :commands lsp
    :hook ((prog-mode . lsp)
           (lsp-mode  . lsp-enable-which-key-integration)
           (lsp-mode  . (lambda ()
                          (jawadcode/leader-keys "l" lsp-command-map))))
    :delight flymake-mode)

  (use-package lsp-ui       :commands lsp-ui-mode)
  (use-package lsp-ivy      :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

** C-Mode && C++-Mode

C is for novelty and C++ for testing my mental fortitude.

#+begin_src emacs-lisp
  (defun c-c++-indentation-hook ()
    (setq c-basic-offset tab-width)
    (setq-local evil-shift-width 4))

  (add-hook 'c-mode-hook 'c-c++-indentation-hook)
  (add-hook 'c++-mode-hook 'c-c++-indentation-hook)
#+end_src

** Rust-Mode

Evolve to 🦀.

#+begin_src emacs-lisp
  (use-package rust-mode :commands rust-mode)
#+end_src

** Python-Mode

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred
#+end_src

** Haskell-Mode

I love me some Zygohistomorphic Prepromorphisms.

#+begin_src emacs-lisp
  (use-package lsp-haskell
    :hook ((haskell-mode          . lsp)
           (haskell-literate-mode . lsp)
           (haskell-mode          . (lambda () (setq-local evil-shift-width 2)))))
#+end_src

** Lean4-Mode

I love lean 💜.

#+begin_src emacs-lisp
  (use-package lean4-mode
    :straight (lean4-mode
               :host github
               :repo "leanprover/lean4-mode"
               :files ("*.el" "data"))
    :commands lean4-mode)
#+end_src

** Idris2-Mode

The simplicity of Coq combined with the usability of Haskell. Currently no
windows support.

#+begin_src emacs-lisp
  (linux-specific!
   (use-package idris2-mode
     :straight (idris2-mode
                :host github
                :repo "idris-community/idris2-mode")
     :commands idris2-mode))
#+end_src

** Meson-Mode

The only usable C/C++ build system.

#+begin_src emacs-lisp
  (use-package meson-mode :commands meson-mode)
#+end_src

** CMake-Mode

Only for working on the projects of other unenlightened people.

#+begin_src emacs-lisp
  (use-package cmake-mode :commands cmake-mode)
#+end_src

** Nix-Mode

I hate this thing, it's like a brain parasite.

#+begin_src emacs-lisp
  (linux-specific!
   (progn
     (use-package lsp-nix
       :straight lsp-mode
       :custom (lsp-nix-nil-formatter ["nixpkgs-fmt"]))

     (use-package nix-mode
       :hook ((nix-mode . lsp-deferred)
              (nix-mode . (lambda ()
                            (setq-local tab-width 2)
                            (setq-local evil-shift-width 2)))))))
#+end_src

** Typescript-Mode

Gotta work on webshit from time to time.

#+begin_src emacs-lisp
  (use-package typescript-mode)
#+end_src

** Svelte-Mode

I refuse to learn React.

#+begin_src emacs-lisp
  (use-package svelte-mode
    :hook ((svelte-mode . lsp)
           ;; Looks worse with ts, css and js isn't highlighted
           (svelte-mode . (lambda () (tree-sitter-hl-mode -1)))))
#+end_src

** LaTeX-Mode (AUCTeX)

This definitely hasn't taken weeks and weeks of refinement and iteration to
bring to a barely usable state.

#+begin_src emacs-lisp
  (use-package latex
    :straight auctex
    :defer t
    :custom (bibtex-dialect 'biblatex)
    :mode ("\\.tex\\'" . LaTeX-mode)
    :hook (TeX-mode . prettify-symbols-mode)
    :init
    (setq-default TeX-master t)
    (setq TeX-parse-self t
          TeX-auto-save t
          TeX-auto-local ".auctex-auto"
          TeX-style-local ".auctex-style"
          TeX-source-correlate-mode t
          TeX-source-correlate-method 'synctex
          TeX-save-query nil
          TeX-engine 'xetex
          TeX-PDF-mode t)
    :config
    ;; Source: https://tex.stackexchange.com/a/86119/81279
    (setq font-latex-match-reference-keywords
          '(;; BibLaTeX
            ("printbibliography" "[{")
            ("addbibresource" "[{")
            ;; Standard commands.
            ("cite" "[{")
            ("citep" "[{")
            ("citet" "[{")
            ("Cite" "[{")
            ("parencite" "[{")
            ("Parencite" "[{")
            ("footcite" "[{")
            ("footcitetext" "[{")
            ;; Style-specific commands.
            ("textcite" "[{")
            ("Textcite" "[{")
            ("smartcite" "[{")
            ("Smartcite" "[{")
            ("cite*" "[{")
            ("parencite*" "[{")
            ("supercite" "[{")
            ;; Qualified citation lists.
            ("cites" "[{")
            ("Cites" "[{")
            ("parencites" "[{")
            ("Parencites" "[{")
            ("footcites" "[{")
            ("footcitetexts" "[{")
            ("smartcites" "[{")
            ("Smartcites" "[{")
            ("textcites" "[{")
            ("Textcites" "[{")
            ("supercites" "[{")
            ;; Style-independent commands.
            ("autocite" "[{")
            ("Autocite" "[{")
            ("autocite*" "[{")
            ("Autocite*" "[{")
            ("autocites" "[{")
            ("Autocites" "[{")
            ;; Text commands.
            ("citeauthor" "[{")
            ("Citeauthor" "[{")
            ("citetitle" "[{")
            ("citetitle*" "[{")
            ("citeyear" "[{")
            ("citedate" "[{")
            ("citeurl" "[{")
            ;; Special commands.
            ("fullcite" "[{")
            ;; Cleveref.
            ("cref" "{")
            ("Cref" "{")
            ("cpageref" "{")
            ("Cpageref" "{")
            ("cpagerefrange" "{")
            ("Cpagerefrange" "{")
            ("crefrange" "{")
            ("Crefrange" "{")
            ("labelcref" "{")))
    (setq font-latex-match-textual-keywords
          '(;; BibLaTeX
            ("parentext" "{")
            ("brackettext" "{")
            ("hybridblockquote" "[{")
            ;; Auxiliary commands.
            ("textelp" "{")
            ("textelp*" "{")
            ("textins" "{")
            ("textins*" "{")
            ;; Subcaption.
            ("subcaption" "[{")))
    (setq font-latex-match-variable-keywords
          '(;; Amsmath.
            ("numberwithin" "{")
            ;; Enumitem.
            ("setlist" "[{")
            ("setlist*" "[{")
            ("newlist" "{")
            ("renewlist" "{")
            ("setlistdepth" "{")
            ("restartlist" "{")
            ("crefname" "{")))

    (pcase system-type
      ('windows-nt
       (add-to-list 'TeX-view-program-list '("Okular" ("okular --noraise --unique file:%o" (mode-io-correlate "#src:%n%a"))))
       (add-to-list 'TeX-view-program-selection '(output-pdf "Okular")))
      ('gnu/linux
       (add-to-list 'TeX-view-program-selection '(output-pdf "PDF Tools"))
       (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)))

    (add-hook 'tex-mode-local-vars-hook #'lsp)
    (add-hook 'latex-mode-local-vars-hook #'lsp)

    (require 'tex-fold)
    (add-hook 'LaTeX-mode-hook #'TeX-fold-mode)
    (require 'preview)
    (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup))

  (use-package auctex-latexmk
    :after latex
    :hook (LaTeX-mode . (lambda () (setq TeX-command-default "LatexMk")))
    :init (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    :config (auctex-latexmk-setup))
  (use-package evil-tex
    :after latex
    :hook (LaTeX-mode . evil-tex-mode))
  (use-package cdlatex
    :after latex
    :hook ((LaTeX-mode . cdlatex-mode)
           (org-mode   . org-cdlatex-mode))
    :config (setq cdlatex-use-dollar-to-ensure-math nil))

  (use-package company-auctex
    :after latex
    :config (company-auctex-init))

  (use-package company-reftex
    :after latex
    :config
    (add-hook 'TeX-mode-hook
              #'(lambda ()
                 (setq-local company-backends
                             (append
                              '(company-reftex-labels company-reftex-citations)
                              company-backends)))))

  (use-package company-math
    :after latex
    :config
    (add-hook 'TeX-mode-hook
              #'(lambda ()
                 (setq-local company-backends
                             (append
                              '(company-math-symbols-latex company-math-symbols-unicode company-latex-commands)
                              company-backends)))))
#+end_src

